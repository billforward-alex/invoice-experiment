<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<artifactId>invoice-templates</artifactId>
		<groupId>net.billforward</groupId>
		<version>1.0-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	<modelVersion>4.0.0</modelVersion>

	<artifactId>grunter</artifactId>
	<packaging>jar</packaging>

	<name>grunter</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>io.apigee.trireme</groupId>
			<artifactId>trireme-core</artifactId>
			<version>0.8.7</version>
		</dependency>
		<dependency>
			<groupId>io.apigee.trireme</groupId>
			<artifactId>trireme-node12src</artifactId>
			<version>0.8.7</version>
		</dependency>
		<dependency>
			<!-- Possibly not needed, since we have 12?-->
			<groupId>io.apigee.trireme</groupId>
			<artifactId>trireme-node10src</artifactId>
			<version>0.8.7</version>
		</dependency>
		<!--<dependency>-->
			<!--&lt;!&ndash; Possibly not needed? &ndash;&gt;-->
			<!--&lt;!&ndash; The NPM package for Trireme lets you run it on the command line just like "node". &ndash;&gt;-->
			<!--<groupId>io.apigee.trireme</groupId>-->
			<!--<artifactId>trireme-npm</artifactId>-->
			<!--<version>0.8.7</version>-->
		<!--</dependency>-->
		<dependency>
			<groupId>io.apigee.trireme</groupId>
			<artifactId>trireme-util</artifactId>
			<version>0.8.7</version>
		</dependency>
		<dependency>
			<!-- Probably unneeded, but might let us compile the JS instead of interpreting-->
			<groupId>io.apigee.trireme</groupId>
			<artifactId>rhino-compiler</artifactId>
			<version>0.8.7</version>
		</dependency>
		<dependency>
			<!-- Maybe in case contacting HTTPS CDNs -->
			<groupId>io.apigee.trireme</groupId>
			<artifactId>trireme-crypto</artifactId>
			<version>0.8.7</version>
		</dependency>

		<!-- Node logging-->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.3</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>2.3</version>
		</dependency>


		<dependency>
			<!-- Dependency for Rhino compiler plugin-->
			<groupId>org.mozilla</groupId>
			<artifactId>rhino</artifactId>
			<version>1.7R4</version>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<!-- Simply for installing node_modules so we don't have to check it in-->
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
				<version>0.0.25</version>

				<!-- optional -->
				<configuration>
					<workingDirectory>src/main/resources/js</workingDirectory>
				</configuration>

				<executions>
					<execution>
						<!-- optional: you don't really need execution ids,
						but it looks nice in your build log. -->
						<id>install node and npm</id>
						<goals>
							<goal>install-node-and-npm</goal>
						</goals>
						<!-- optional: default phase is "generate-resources" -->
						<phase>generate-resources</phase>
						<configuration>
							<nodeVersion>v0.12.7</nodeVersion>
							<npmVersion>2.14.1</npmVersion>
							<!-- optional: where to download node and npm from. Defaults to http://nodejs.org/dist/ -->
							<!--<downloadRoot>http://myproxy.example.org/nodejs/dist/</downloadRoot>-->

							<!-- If you need to download Node/npm through a proxy: configure your Maven proxy settings in ~/.m2/settings.xml.
							 This plugin will use the same proxy settings as Maven.-->
							<nodeDownloadRoot>https://nodejs.org/dist/</nodeDownloadRoot>
							<!--<npmDownloadRoot>http://npm.org/npm/-/</npmDownloadRoot>-->
						</configuration>
					</execution>

					<execution>
						<id>npm install</id>
						<goals>
							<goal>npm</goal>
						</goals>

						<!-- optional: default phase is "generate-resources" -->
						<phase>generate-resources</phase>

						<configuration>
							<!-- optional: The default argument is actually
							"install", so unless you need to run some other npm command,
							you can remove this whole <configuration> section.
							-->
							<arguments>install</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!--<plugin>-->
				<!--<artifactId>maven-resources-plugin</artifactId>-->
				<!--<version>2.7</version>-->
				<!--<executions>-->
					<!--<execution>-->
						<!--<id>copy-resources</id>-->
						<!--&lt;!&ndash; here the phase you need &ndash;&gt;-->
						<!--<phase>validate</phase>-->
						<!--<goals>-->
							<!--<goal>copy-resources</goal>-->
						<!--</goals>-->
						<!--<configuration>-->
							<!--<outputDirectory>${basedir}/target/jsonly</outputDirectory>-->
							<!--<resources>-->
								<!--<resource>-->
									<!--<directory>src/main/resources/js</directory>-->
									<!--<filtering>false</filtering>-->
									<!--<includes>-->
										<!--<include>**/*.js</include>-->
									<!--</includes>-->
								<!--</resource>-->
							<!--</resources>-->
						<!--</configuration>-->
					<!--</execution>-->
				<!--</executions>-->
			<!--</plugin>-->

			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>replacer</artifactId>
				<version>1.5.3</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>replace</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<includes>
						<include>${basedir}/src/main/resources/js/**/*.js</include>
					</includes>
					<!--<outputBasedir>${basedir}/target/jssanitized</outputBasedir>-->
					<outputBasedir>jssanitized</outputBasedir>
					<replacements>
						<replacement>
							<token>^#!.*$</token>
							<value></value>
						</replacement>
					</replacements>
				</configuration>
			</plugin>

			<!--<plugin>-->
				<!--<groupId>org.apache.maven.plugins</groupId>-->
				<!--<artifactId>maven-compiler-plugin</artifactId>-->
				<!--<version>2.3.2</version>-->
				<!--<configuration>-->
					<!--<includes>-->
						<!--<include>src/main/resources/js/**/*.js</include>-->
					<!--</includes>-->
				<!--</configuration>-->
			<!--</plugin>-->

			<plugin>
				<!-- Compiler of js -> .class-->
				<groupId>de.skiptag</groupId>
				<artifactId>rhino-maven-plugin</artifactId>
				<version>1.0.3</version>

				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
				</executions>

				<configuration>
					<languageVersion>170</languageVersion>

					<optLevel>9</optLevel>

					<sourceDirectory>${basedir}/target/jssanitized</sourceDirectory>

					<outputDirectory>${basedir}/target/compiledjs</outputDirectory>

				</configuration>
			</plugin>
		</plugins>

	</build>
</project>
