<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<artifactId>invoice-templates</artifactId>
		<groupId>net.billforward</groupId>
		<version>1.0-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	<modelVersion>4.0.0</modelVersion>

	<artifactId>grunter</artifactId>
	<packaging>jar</packaging>

	<name>grunter</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
				<version>0.0.25</version>

				<configuration>
					<workingDirectory>src/main/node</workingDirectory>
				</configuration>

				<executions>
					<execution>
						<!-- optional: you don't really need execution ids,
						but it looks nice in your build log. -->
						<id>install node and npm</id>
						<goals>
							<goal>install-node-and-npm</goal>
						</goals>
						<!-- optional: default phase is "generate-resources" -->
						<phase>generate-resources</phase>
						<configuration>
							<nodeVersion>v0.12.7</nodeVersion>
							<npmVersion>2.14.1</npmVersion>
							<!-- optional: where to download node and npm from. Defaults to http://nodejs.org/dist/ -->
							<!--<downloadRoot>http://myproxy.example.org/nodejs/dist/</downloadRoot>-->

							<!--If you need to download Node/npm through a proxy: configure your Maven proxy settings in ~/.m2/settings.xml. This plugin will use the same proxy settings as Maven-->

							<!-- You can also specify separate download roots for npm and node as they are now stored in separate repos. -->
							<!--<nodeDownloadRoot>http://nodejs.org/nodejs/dist/</nodeDownloadRoot>-->
							<!--<npmDownloadRoot>http://npm.org/npm/-/</npmDownloadRoot>-->
						</configuration>
					</execution>

					<execution>
						<id>npm install</id>
						<goals>
							<goal>npm</goal>
						</goals>

						<!-- optional: default phase is "generate-resources" -->
						<phase>generate-resources</phase>

						<configuration>
							<!-- optional: The default argument is actually
							"install", so unless you need to run some other npm command,
							you can remove this whole <configuration> section.
							-->
							<arguments>install</arguments>
						</configuration>
					</execution>

					<execution>
						<id>grunt build</id>
						<goals>
							<goal>grunt</goal>
						</goals>

						<!-- optional: the default phase is "generate-resources" -->
						<phase>generate-resources</phase>

						<!--<configuration>-->
							<!--&lt;!&ndash; optional: if not specified, it will run Grunt's default-->
							<!--task (and you can remove this whole <configuration> section.) &ndash;&gt;-->
							<!--<arguments>build</arguments>-->
						<!--</configuration>-->
					</execution>
				</executions>
			</plugin>

			<!--<plugin>-->
				<!--&lt;!&ndash; Since we want grunt-maven-plugin to take control of what ends up in WAR, we need to tell Maven WAR plugin to ignore our statics dir when creating WAR &ndash;&gt;-->
				<!--<artifactId>maven-war-plugin</artifactId>-->
				<!--<version>2.3</version>-->
				<!--<configuration>-->
					<!--<warSourceExcludes>uncsser/**</warSourceExcludes>-->
				<!--</configuration>-->
			<!--</plugin>-->
		</plugins>
	</build>
</project>
